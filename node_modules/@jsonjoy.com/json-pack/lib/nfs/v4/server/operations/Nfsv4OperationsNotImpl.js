"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Nfsv4OperationsNotImpl = void 0;
class Nfsv4OperationsNotImpl {
    async ACCESS(request, ctx) {
        ctx.connection.logger.log('ACCESS', request);
        throw new Error('Not implemented');
    }
    async CLOSE(request, ctx) {
        ctx.connection.logger.log('CLOSE', request);
        throw new Error('Not implemented');
    }
    async COMMIT(request, ctx) {
        ctx.connection.logger.log('COMMIT', request);
        throw new Error('Not implemented');
    }
    async CREATE(request, ctx) {
        ctx.connection.logger.log('CREATE', request);
        throw new Error('Not implemented');
    }
    async DELEGPURGE(request, ctx) {
        ctx.connection.logger.log('DELEGPURGE', request);
        throw new Error('Not implemented');
    }
    async DELEGRETURN(request, ctx) {
        ctx.connection.logger.log('DELEGRETURN', request);
        throw new Error('Not implemented');
    }
    async GETATTR(request, ctx) {
        ctx.connection.logger.log('GETATTR', request);
        throw new Error('Not implemented');
    }
    async GETFH(request, ctx) {
        ctx.connection.logger.log('GETFH', request);
        throw new Error('Not implemented');
    }
    async LINK(request, ctx) {
        ctx.connection.logger.log('LINK', request);
        throw new Error('Not implemented');
    }
    async LOCK(request, ctx) {
        ctx.connection.logger.log('LOCK', request);
        throw new Error('Not implemented');
    }
    async LOCKT(request, ctx) {
        ctx.connection.logger.log('LOCKT', request);
        throw new Error('Not implemented');
    }
    async LOCKU(request, ctx) {
        ctx.connection.logger.log('LOCKU', request);
        throw new Error('Not implemented');
    }
    async LOOKUP(request, ctx) {
        ctx.connection.logger.log('LOOKUP', request);
        throw new Error('Not implemented');
    }
    async LOOKUPP(request, ctx) {
        ctx.connection.logger.log('LOOKUPP', request);
        throw new Error('Not implemented');
    }
    async NVERIFY(request, ctx) {
        ctx.connection.logger.log('NVERIFY', request);
        throw new Error('Not implemented');
    }
    async OPEN(request, ctx) {
        ctx.connection.logger.log('OPEN', request);
        throw new Error('Not implemented');
    }
    async OPENATTR(request, ctx) {
        ctx.connection.logger.log('OPENATTR', request);
        throw new Error('Not implemented');
    }
    async OPEN_CONFIRM(request, ctx) {
        ctx.connection.logger.log('OPEN_CONFIRM', request);
        throw new Error('Not implemented');
    }
    async OPEN_DOWNGRADE(request, ctx) {
        ctx.connection.logger.log('OPEN_DOWNGRADE', request);
        throw new Error('Not implemented');
    }
    async PUTFH(request, ctx) {
        ctx.connection.logger.log('PUTFH', request);
        throw new Error('Not implemented');
    }
    async PUTPUBFH(request, ctx) {
        ctx.connection.logger.log('PUTPUBFH', request);
        throw new Error('Not implemented');
    }
    async PUTROOTFH(request, ctx) {
        ctx.connection.logger.log('PUTROOTFH', request);
        throw new Error('Not implemented');
    }
    async READ(request, ctx) {
        ctx.connection.logger.log('READ', request);
        throw new Error('Not implemented');
    }
    async READDIR(request, ctx) {
        ctx.connection.logger.log('READDIR', request);
        throw new Error('Not implemented');
    }
    async READLINK(request, ctx) {
        ctx.connection.logger.log('READLINK', request);
        throw new Error('Not implemented');
    }
    async REMOVE(request, ctx) {
        ctx.connection.logger.log('REMOVE', request);
        throw new Error('Not implemented');
    }
    async RENAME(request, ctx) {
        ctx.connection.logger.log('RENAME', request);
        throw new Error('Not implemented');
    }
    async RENEW(request, ctx) {
        ctx.connection.logger.log('RENEW', request);
        throw new Error('Not implemented');
    }
    async RESTOREFH(request, ctx) {
        ctx.connection.logger.log('RESTOREFH', request);
        throw new Error('Not implemented');
    }
    async SAVEFH(request, ctx) {
        ctx.connection.logger.log('SAVEFH', request);
        throw new Error('Not implemented');
    }
    async SECINFO(request, ctx) {
        ctx.connection.logger.log('SECINFO', request);
        throw new Error('Not implemented');
    }
    async SETATTR(request, ctx) {
        ctx.connection.logger.log('SETATTR', request);
        throw new Error('Not implemented');
    }
    async SETCLIENTID(request, ctx) {
        ctx.connection.logger.log('SETCLIENTID', request);
        throw new Error('Not implemented');
    }
    async SETCLIENTID_CONFIRM(request, ctx) {
        ctx.connection.logger.log('SETCLIENTID_CONFIRM', request);
        throw new Error('Not implemented');
    }
    async VERIFY(request, ctx) {
        ctx.connection.logger.log('VERIFY', request);
        throw new Error('Not implemented');
    }
    async WRITE(request, ctx) {
        ctx.connection.logger.log('WRITE', request);
        throw new Error('Not implemented');
    }
    async RELEASE_LOCKOWNER(request, ctx) {
        ctx.connection.logger.log('RELEASE_LOCKOWNER', request);
        throw new Error('Not implemented');
    }
    async ILLEGAL(request, ctx) {
        ctx.connection.logger.log('ILLEGAL', request);
        throw new Error('Not implemented');
    }
}
exports.Nfsv4OperationsNotImpl = Nfsv4OperationsNotImpl;
//# sourceMappingURL=Nfsv4OperationsNotImpl.js.map